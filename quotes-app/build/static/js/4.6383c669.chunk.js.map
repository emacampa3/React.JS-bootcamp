{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/ui/LoadingSpinner.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/ui/LoadingSpinner.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/Quotedetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","LoadingSpinner","spinner","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequestFunction","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","sendRequest","loadedComments","data","addedCommentHandlerFunction","useCallback","length","onClick","Quotedetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.6383c669.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"LoadingSpinner_spinner__WWmP2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { useRef, useEffect } from \"react\"\n\nimport useHttp from \"../../hooks/use-http\"\nimport { addComment } from \"../../lib/api\"\nimport LoadingSpinner from \"../ui/LoadingSpinner\"\nimport classes from \"./NewCommentForm.module.css\"\n\nconst NewCommentForm = (props) => {\n\tconst commentTextRef = useRef()\n\n\tconst { sendRequestFunction, status, error } = useHttp(addComment)\n\n  const {onAddedComment} = props\n\n  useEffect(()=> {\n    if (status === 'completed' && !error) {\n      onAddedComment()\n    }\n  }, [status, error, onAddedComment])\n\n\tconst submitFormHandler = (event) => {\n\t\tevent.preventDefault()\n\n\t\tconst enteredText = commentTextRef.current.value\n\n\t\tsendRequestFunction({ commentData: { text: enteredText }, quoteId: props.quoteId})\n\t}\n\n\treturn (\n\t\t<form className={classes.form} onSubmit={submitFormHandler}>\n\t\t\t{status === \"pending\" && (\n\t\t\t\t<div className='centered'>\n\t\t\t\t\t<LoadingSpinner />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<div className={classes.control} onSubmit={submitFormHandler}>\n\t\t\t\t<label htmlFor='comment'>Your Comment</label>\n\t\t\t\t<textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n\t\t\t</div>\n\t\t\t<div className={classes.actions}>\n\t\t\t\t<button className='btn'>Add Comment</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default NewCommentForm\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\"\nimport { useParams } from \"react-router-dom\"\n\nimport classes from \"./Comments.module.css\"\nimport NewCommentForm from \"./NewCommentForm\"\nimport useHttp from \"../../hooks/use-http\"\nimport { getAllComments } from \"../../lib/api\"\nimport LoadingSpinner from \"../ui/LoadingSpinner\"\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n\tconst [isAddingComment, setIsAddingComment] = useState(false)\n\tconst params = useParams()\n\n\tconst { quoteId } = params\n\n\tconst { sendRequest, status, data: loadedComments } = useHttp(getAllComments)\n\n\tconst startAddCommentHandler = () => {\n\t\tsetIsAddingComment(true)\n\t}\n\n\tuseEffect(() => {\n\t\tsendRequest(quoteId)\n\t}, [quoteId, sendRequest])\n\n\tconst addedCommentHandlerFunction = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n\n\tlet comments\n\n\tif (status === \"pending\") {\n\t\tcomments = (\n\t\t\t<div className='centered'>\n\t\t\t\t<LoadingSpinner />\n\t\t\t</div>\n\t\t)\n\t}\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className=\"centered\">No comments were added yet!</p>\n  }\n\n\treturn (\n\t\t<section className={classes.comments}>\n\t\t\t<h2>User Comments</h2>\n\t\t\t{!isAddingComment && (\n\t\t\t\t<button className='btn' onClick={startAddCommentHandler}>\n\t\t\t\t\tAdd a Comment\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{isAddingComment && (\n\t\t\t\t<NewCommentForm\n\t\t\t\t\tquoteId={params.quoteId}\n\t\t\t\t\tonAddedComment={addedCommentHandlerFunction}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{comments}\n\t\t</section>\n\t)\n}\n\nexport default Comments\n","import { Fragment, useEffect } from \"react\"\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\"\n\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\"\nimport Comments from \"../components/comments/Comments\"\nimport useHttp from \"../hooks/use-http\"\nimport { getSingleQuote } from \"../lib/api\"\nimport LoadingSpinner from '../components/ui/LoadingSpinner'\n\nconst Quotedetail = () => {\n\tconst match = useRouteMatch()\n\tconst params = useParams()\n\n  const { quoteId } = params\n\n\tconst {\n\t\tsendRequestFunction,\n\t\tstatus,\n\t\tdata: loadedQuote,\n\t\terror,\n\t} = useHttp(getSingleQuote, true)\n\n  useEffect(() => {\n    sendRequestFunction(quoteId)\n  }, [sendRequestFunction, quoteId])\n\n  if (status === 'pending') {\n    return <div className=\"centered\">\n      <LoadingSpinner />\n    </div>\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>\n  }\n\n\tif (!loadedQuote.text) {\n\t\treturn <p>No quote found!</p>\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n\t\t\t<Route path={`${match.path}`} exact>\n\t\t\t\t<div className='centered'>\n\t\t\t\t\t<Link className='btn--flat' to={`${match.url}/comments`}>\n\t\t\t\t\t\tLoad Comments\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t</Route>\n\t\t\t<Route path={`${match.path}/comments`}>\n\t\t\t\t<Comments />\n\t\t\t</Route>\n\t\t</Fragment>\n\t)\n}\n\nexport default Quotedetail\n"],"sourceRoot":""}